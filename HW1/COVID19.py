# -*- coding: utf-8 -*-
"""HW_20231219_윤문섭.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zK0lT31J0cYbXR0GNR1ZVTI3y-M0xya-
"""

# 폰트
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
!apt-get update -qq
!apt-get install fonts-nanum* -qq

!pip install geopy

import matplotlib.pyplot as plt
from matplotlib import rc
import platform

#폰트 깨짐 오류 해결 코드
if platform.system() == 'Windows':
    rc('font', family='Malgun Gothic')
elif platform.system() == 'Darwin': # Mac
    rc('font', family='AppleGothic')
else: #linux
    rc('font', family='NanumGothic')
plt.rcParams['axes.unicode_minus'] = False

"""# 과제 : 서울특별시 자치구별 코로나19 백신접종현황과 예방접종 가능 병원 수의 관계
분석 1 : 월별 접종 유형에 따른 최대, 최소 값, 평균 값과 지역구 \
분석 2 : 지역구에 따른 월별/접종 유형별 최대, 최소, 평균 인구 \
분석 3 : 지역별 총 예방 접종 현황과 예방접종 가능 병원의 수 \


Seaborn, Folium
"""

# Import 라이브러리
import pandas as pd
import seaborn as sns
import numpy as np

# 데이터 불러오기
df = pd.read_csv('서울특별시 자치구별 코로나19 백신접종현황.csv', encoding='cp949')
print()

# 두 번째 데이터셋 (for 분석 2)
df_2 = df.drop('자치구', axis=1)
df_2.head()
# 결측치 확인 -> 결측치 없음
print(df.isnull().sum())
print()

# 컬럼1 확인('자치구 제외')
df.columns
Total_col = df.columns.to_list()
selected_col = Total_col[1:]
#print(selected_col)

# 컬럼 2 확인 df['자치구']
x2 = df['자치구'].values

"""#분석 1: 월별 접종 유형에 따른 최대,최소 값과 지역구"""

# 분석 1 : 월별, 자치구 접종자 수
# x축 : 자치구
# y축 : 2-6월 1차 접종자 ~ 10월말(누적) 추가접종자 수
x=df['자치구']

for i in range(len(selected_col)):
  max_people = df[selected_col[i]].max()
  max_local = df[df[selected_col[i]] == max_people].iloc[0]
  min_people = df[selected_col[i]].min()
  min_local = df[df[selected_col[i]] == min_people].iloc[0]
  mean_people = df[selected_col[i]].mean()

  plt.figure()
  plt.bar(x, df[selected_col[i]], width=0.5)
  plt.xlabel('자치구')
  plt.ylabel('접종자 수')
  plt.xticks(rotation=45)
  plt.title(selected_col[i])
  plt.show()
  print('-'*100)
  print("- 월별 접종 유형에 따른 최대 값과 지역구: ", selected_col[i], max_people, max_local[0])
  print("- 월별 접종 유형에 따른 최소 값과 지역구: ", selected_col[i], min_people, min_local[0])
  print("- 월별 접종 유형에 따른 평균 값: ",mean_people)
  print('-'*100)
  print()

"""# 분석 2 : 지역구에 따른 월별/접종 유형별 최대,최소 인구"""

# 분석 2 : 자치구 별, 월 접종자 수
# x축 : 2-6월 1차 접종자 ~ 10월말(누적) 추가접종자 수
# y축 : 자치구
for i in range(0, len(x2)):
  max_people = df_2.iloc[i].max()
  max_type=df_2.columns[df_2.iloc[i] == max_people][0]
  min_people = df_2.iloc[i].min()
  min_type=df_2.columns[df_2.iloc[i] == min_people][0]
  mean_people = df_2.iloc[i].mean()

  y = df_2.iloc[i].to_list()
  plt.bar(selected_col, y)
  plt.xlabel('접종 월/차수')
  plt.ylabel('자치구')
  plt.xticks(rotation=45)
  plt.title(x2[i])
  plt.show()
  print('-'*100)
  print("- 지역구에 따른 월별/접종 유형별 최대 인구: ", x[i], max_people, max_type)
  print("- 지역구에 따른 월별/접종 유형별 최소 인구: ", x[i], min_people, min_type)
  print("- 지역구에 따른 월별/접종 유형별 평균 인구: ", mean_people)
  print('-'*100)

"""#분석 3 : 자치구 별 총 예방 접종 현황과 예방접종 가능 병원의 수

### 결과 : 자치구 별 총 예방접종 인구수와 병원의 수의 관계는 4곳 (송파구, 중구, 용산구, 금천구)을 제외하고 상관이 없다.
"""

# 데이터 출처(질병 관리처) : https://ncv.kdca.go.kr/menu.es?mid=a11720000000
# 다운로드 및 크롤링이 불가하여 테이블 복사하여 액셀로 csv 파일 제작
import folium
import pandas as pd
from geopy.geocoders import Nominatim
geo_local = Nominatim(user_agent='South Korea')

# 서울시 코로나 예방 접종 기관
df_data = pd.read_csv('서울시_코로나_예방접종_기관.csv', sep=';')

# 서울시 총 코로나 예방 접종자 수
df['Total'] = df.iloc[:, 1:].sum(axis=1)

# 코로나 예방 접종 기관에 대한 데이터 프레임 만들기
col = ['시', '자치구', 'Hospital', '백신 이름']

# 이상 데이터 전처리
df_3 = pd.DataFrame(columns=col)
for i in range(len(df_data)):
    data_list = df_data.iloc[i, 0].split(',')

    # ',' 를 기준으로 4가 넘는 데이터는 Pass => 결과 : 1개 제거
    if len(data_list) >4:
      continue
    df_3 = pd.concat([df_3, pd.DataFrame([data_list], columns=col)], ignore_index=True)

gu_list = df_3['자치구'].drop_duplicates().to_list()
correct_gu=['도봉구','용산구','동대문구','중구','강서구','동작구','종로구','중랑구','송파구','성동구','영등포구','강동구','서대문구','성북구','노원구','마포구','금천구','광진구','강북구','구로구','양천구','서초구','강남구','은평구','관악구']
df_3['자치구']=df_3['자치구'].replace(gu_list, correct_gu)

series_data = pd.Series(df_3['자치구'])
value_counts_result = series_data.value_counts()
result_df = pd.DataFrame({'자치구': value_counts_result.index, 'Hospital': value_counts_result.values})

print(df_3.head())
print()
print(df_3['자치구'].value_counts())
print()
print("서울시 총 코로나 예방접종 기관의 수 :", df_3['자치구'].value_counts().sum()) # 3123 곳 (1곳 제거)
print()

# 서울시 지역구 별 총 백신 접종자 수 + 코로나 예방접종 가능한 병원의 수
column_names = [df.columns[0], df.columns[-1]]
Total_df = df[column_names]
Total_df = Total_df.sort_values(by='Total', ascending=False)
Merged_df = pd.merge(Total_df, result_df, on='자치구')

Gu_list_Set = Merged_df['자치구'].values.tolist()

# 서울시 각 지역구의 위도와 경도를 저장할 리스트
latitudes = []
longitudes = []

# 각 지역구에 대한 위도와 경도
for district in Gu_list_Set:
  location = geo_local.geocode(f'{district}, 서울', language='ko')
  if location:
      latitudes.append(location.latitude)
      longitudes.append(location.longitude)
  else:
      latitudes.append(None)
      longitudes.append(None)

seoul_df = pd.DataFrame({'자치구': Gu_list_Set, 'Latitude': latitudes,'Longitude': longitudes})
Merged_df = pd.merge(Merged_df, seoul_df, on='자치구')

Merged_df2 = Merged_df.sort_values(by='Hospital', ascending=False).reset_index(drop=True)

#### 지도 표시 (예방접종자 수 순위, 병원의 수 순위) ####
# 서울시 중심 좌표
seoul_center = (37.5665, 126.9780)
# 지도 생성
Result = folium.Map(location=seoul_center, zoom_start=11.5)

# 각 지역구에 대해 원 그리기 (원의 크기와 총 접종자 수는 비례하다.)
for index, row in Merged_df.iterrows():
    folium.CircleMarker(
        location=[row['Latitude'], row['Longitude']],
        radius=row['Hospital']/5,
        color='blue',
        fill=True,
        fill_color='red',
        fill_opacity=0.7,
        popup=f"{row['자치구']} - Total: {row['Total']}, Hospital Count: {row['Hospital']}"
    ).add_to(Result)

    # 원 안에 순위 텍스트 추가
    # 접종자 수 순위
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        icon=folium.DivIcon(
            icon_size=(150, 36),
            icon_anchor=(0, 0),
            html=f'<div style="font-size: 8pt; font-weight: bold; color : black">{"접종자 수 순위 : ", index + 1}</div>'
        )
    ).add_to(Result)

# 병원의 순위
for index, row in Merged_df2.iterrows():

    # 원 안에 순위 텍스트 추가
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        icon=folium.DivIcon(
            icon_size=(150, 36),
            icon_anchor=(0, -12),
            html=f'<div style="font-size: 8pt; font-weight: bold; color : black">{"병원 수 순위 : ", index + 1}</div>'
        )
    ).add_to(Result)

Result.save("seoul_population_hospitals_map_with_rank_bold.png")

Result